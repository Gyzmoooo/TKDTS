import sys
import time
import re
import traceback
import os

import requests
import pandas as pd
from joblib import load

# --- Costanti e Configurazioni 
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_PATH = BASE_DIR.strip("src\python") + '\model\\rf_model.sav'

URL_FETCH = "http://192.168.4.1/"
URL_DELETE = f"{URL_FETCH}delete"

TIMESTEPS = 20
NUM_BOARDS = 4
SENSORS = ['A', 'G']
AXES = ['x', 'y', 'z']

EXPECTED_ESP_IDS = [str(i + 1) for i in range(NUM_BOARDS)]
NUM_DATA_PER_TIMESTEP = len(SENSORS) * len(AXES) * NUM_BOARDS
EXPECTED_DATA_COLUMNS = TIMESTEPS * NUM_DATA_PER_TIMESTEP

MAX_FETCH_ATTEMPTS = 2
RETRY_DELAY_SECONDS = 2

class UnsufficientSamples(Exception):
    """Exception raised when the number of samples received is less than expected"""
    def __init__(self, e_samples, r_samples, msg="Samples received is less than expected"):
        self.message = (
            f"{msg}: Received {r_samples}, Expected {e_samples}. "
        )
        super().__init__(self.message)

class UncompleteData(Exception):
    """Exception raised when at least one of the ESP32 didn't send any data"""
    def __init__(self, e_ids, r_ids, msg=" of the ESP32 didn't send any data"):
        self.empty_ids = [esp_id for esp_id in e_ids if esp_id not in r_ids]
        self.message = (
            f"{len(self.empty_ids)}{msg}. IDs of the boards: {self.empty_ids}. "
        )
        super().__init__(self.message)



class DataProcessor:
    def __init__(self, url_delete, timesteps, num_boards, sensors, axes, expected_esp_ids):
        self.url_delete = url_delete
        self.timesteps = timesteps
        self.num_boards = num_boards
        self.sensors = sensors
        self.axes = axes
        self.expected_esp_ids = expected_esp_ids


    def generate_column_names(self):
        column_names = []
        for i in range(self.timesteps):
            suffix = f"_{i + 1}"
            for board_id in range(1, self.num_boards + 1):
                for sensor_type in self.sensors:
                    for axis in self.axes:
                        col_name = f"{sensor_type}{board_id}{axis}{suffix}"
                        column_names.append(col_name)
        return column_names

    def parse_data(self, raw_data):
        number_pattern = r'-?\d+\.?\d*'
        esp_data = []
        
        # Parses all data and stores them in a list
        for esp_id in self.expected_esp_ids:
            last_start_idx = raw_data.rfind(f"Start{esp_id};")
            last_end_idx = raw_data.find(f"End{esp_id};", last_start_idx + len(f"Start{esp_id};"))
            if last_end_idx != -1 and last_start_idx != -1:
                esp_block = raw_data[last_start_idx + len(f"Start{esp_id};") : last_end_idx]
                esp_block = esp_block.replace(f"ID{esp_id}", "")
                esp_data.append([float(num_str) for num_str in re.findall(number_pattern, esp_block)])
            else: esp_data.append([])

        return esp_data

    def format_data(self, esp_data):
        # Verifies data completeness and number of samples
        active_esp_ids = [str(esp_id + 1) for esp_id in range(len(esp_data)) if esp_data[esp_id] != []]
        samples_counts = [(len(esp_data[int(esp_id) - 1]) / 6) for esp_id in active_esp_ids]
        min_samples = int(min(samples_counts))
        #print(f"QUESTO è len(samples_counts): {len(samples_counts)}")
        #print(f"QUESTO è self.num_boards: {self.num_boards}")
        if self.timesteps > 0 and len(samples_counts) != self.num_boards: 
            raise UncompleteData(e_ids=self.expected_esp_ids, r_ids=active_esp_ids)
        elif min_samples < self.timesteps:
            raise UnsufficientSamples(e_samples=self.timesteps, r_samples=min_samples)

        # Eliminates excessive data
        for esp in range(self.num_boards):
            data_to_eliminate = int(-6 * (samples_counts[int(esp)] - min_samples) - 1)
            del esp_data[esp][-1:data_to_eliminate:-1]

        # Conversion in list of lists format, where each sublist contains a single sample
        unfiltered_data = []
        for i in range(min_samples):
            sample = []
            for j in range(self.num_boards):
                start = i * len(self.sensors) * len(self.axes)
                end = start + len(self.sensors) * len(self.axes)
                sample.extend(esp_data[j][start:end])
            unfiltered_data.append(sample)
        
        # Sample reduction to 20
        data = [[]]
        step = (len(unfiltered_data) - 1) / (self.timesteps - 1)
        for i in range(self.timesteps):
            index = round(i * step)
            for j in unfiltered_data[min(index, len(unfiltered_data) - 1)]: data[0].append(j)

        return data
    
    def delete_data_on_master(self):
        try:
            print("Sending DELETE request at", self.url_delete)
            response = requests.get(self.url_delete, timeout=5)
            if response.status_code == 200 and "OK" in response.text:
                return True
            else:
                print(f"Error sending DELETE command: Status {response.status_code}, Response: {response.text}")
                return False
        except requests.exceptions.Timeout:
            print(f"Timeout during DELETE request at {self.url_delete}")
            return False
        except requests.exceptions.RequestException as e:
            print(f"Error during communication with Master (DELETE): {e}")
            return False
        except Exception as e:
            print(f"Generic error during DELETE: {e}")
            return False
    
    def correct_data(self, raw):
        """
        Analizza una stringa di dati da sensori e aggiunge i tag 'End' mancanti.

        Args:
            dati_grezzi: La stringa di dati non elaborata, con elementi separati da ';'.

        Returns:
            Una stringa di dati corretta con tutti i blocchi
            opportunamente chiusi da un tag End<N>.
        """
        components = [part for part in raw.split(';') if part]
        if not components:
            return ""
        correct_parts = []
        id = None
        for comp in components:
            if comp.startswith('Start'):
                if id is not None:
                    correct_parts.append(f"End{id}")
                match = re.search(r'\d+', comp)
                if match:
                    id = match.group(0)
                correct_parts.append(comp)
            elif comp.startswith('End'):
                correct_parts.append(comp)
                id = None
            else:
                correct_parts.append(comp)
        if id is not None:
            correct_parts.append(f"End{id};")

        return ';'.join(correct_parts)
        
if __name__ == "__main__":
    data_processor = DataProcessor(
        url_delete=URL_DELETE,
        timesteps=TIMESTEPS,
        num_boards=NUM_BOARDS,
        sensors=SENSORS,
        axes=AXES,
        expected_esp_ids=EXPECTED_ESP_IDS
    )

    #raw = "Start1;ID1;A:-0.3736,9.5897,-1.0251;G:0.0192,0.1389,-0.0090;ID1;A:-0.1629,9.6519,-0.9101;G:0.0442,0.0229,0.0037;ID1;A:0.0144,9.6519,-0.7520;G:0.0474,0.0208,-0.0005;ID1;A:0.0719,9.6519,-0.8814;G:0.0165,0.0229,-0.0059;ID1;A:-0.1868,9.6519,-0.8622;G:0.0351,-0.0883,0.0122;ID1;A:-0.1293,9.6423,-0.9005;G:0.0346,-0.1527,0.0261;ID1;A:-0.0862,9.6471,-0.9149;G:0.0399,-0.0665,0.0138;ID1;A:-0.1198,9.6328,-1.0155;G:0.0372,-0.0543,0.0074;ID1;A:-0.0862,9.6759,-0.8383;G:0.0303,-0.1437,0.0176;ID1;A:-0.0623,9.6519,-0.9915;G:0.0378,0.0011,0.0064;ID1;A:-0.1916,9.6902,-0.8574;G:0.0404,-0.0106,0.0027;ID1;A:-0.1150,9.6759,-0.8718;G:0.0335,0.0090,0.0005;ID1;A:-0.0958,9.6376,-0.8957;G:0.0335,0.0255,0.0011;ID1;A:-0.1006,9.6519,-0.8478;G:0.0362,0.0181,-0.0011;ID1;A:-0.0910,9.6184,-1.1161;G:0.0303,0.0250,-0.0011;ID1;A:-0.0814,9.6663,-0.8814;G:0.0351,0.0245,-0.0016;ID1;A:-0.1102,9.6663,-0.9628;G:0.0330,0.0255,0.0037;ID1;A:-0.1341,9.6759,-0.9053;G:0.0357,0.0282,0.0011;ID1;A:-0.1198,9.6423,-0.8909;G:0.0346,0.0271,-0.0011;ID1;A:-0.1054,9.6423,-0.9197;G:0.0341,0.0218,0.0053;ID1;A:-0.1293,9.6328,-0.9149;G:0.0367,0.0234,-0.0053;ID1;A:-0.1485,9.6328,-0.9628;G:0.0351,0.0261,0.0011;ID1;A:-0.1341,9.6567,-0.9724;G:0.0341,0.0245,0.0005;ID1;A:-0.1006,9.6136,-0.9149;G:0.0388,0.0255,0.0027;ID1;A:-0.1293,9.6807,-0.9532;G:0.0383,0.0261,0.0000;ID1;A:-0.1006,9.6615,-0.9580;G:0.0341,0.0234,0.0000;ID1;A:-0.1198,9.6567,-0.9580;G:0.0341,0.0261,0.0005;ID1;A:-0.1389,9.6471,-0.9388;G:0.0372,0.0287,0.0016;ID1;A:-0.1198,9.6376,-0.9197;G:0.0372,0.0266,0.0032;ID1;A:-0.0096,9.7190,-0.9772;G:0.0325,0.0271,0.0016;ID1;A:0.0383,9.5465,-0.8430;G:0.0378,0.0282,-0.0053;ID1;A:-0.1198,9.6519,-0.9484;G:0.0351,0.0223,-0.0043;ID1;A:-0.0910,9.6759,-0.9149;G:0.0319,0.0261,0.0016;ID1;A:-0.0766,9.6088,-0.9676;G:0.0378,0.0223,0.0000;ID1;A:-0.1150,9.6567,-0.8718;G:0.0335,0.0234,-0.0011;ID1;A:-0.0671,9.6280,-0.9293;G:0.0346,0.0250,0.0016;ID1;A:-0.1389,9.6663,-0.9963;G:0.0372,0.0250,-0.0021;ID1;A:-0.1054,9.6471,-0.9484;G:0.0362,0.0250,0.0005;ID1;A:-0.1198,9.6567,-0.9580;G:0.0357,0.0266,0.0059;ID1;A:-0.0910,9.6423,-0.9436;G:0.0335,0.0197,0.0021;ID1;A:-0.2682,9.7286,-3.5925;G:-0.2602,0.0234,-0.0027;ID1;A:-0.3401,9.7525,-0.3353;G:0.2389,0.1447,0.0223;ID1;A:-0.0719,9.7717,-1.8250;G:-0.0080,-0.0500,0.0021;ID1;A:-0.0671,9.6423,-1.1496;G:0.2198,0.1937,0.0027;ID1;A:-0.5988,9.4412,-2.5244;G:-0.2570,0.9817,-0.0117;ID1;A:-0.2491,9.6471,0.0575;G:-0.3076,0.0122,-0.0293;ID1;A:0.1485,9.7094,0.0814;G:0.2134,-0.2650,0.0287;ID1;A:-0.2587,9.6711,-1.2502;G:0.3001,0.0378,0.0149;ID1;A:-0.1868,9.7381,-0.9580;G:-0.0649,-0.5241,0.0399;End1;Start2;ID2;A:0.0096,9.5864,-0.5938;G:-0.0074,0.0048,-0.0154;ID2;A:0.0431,9.6295,-0.5555;G:-0.0117,0.0032,-0.0223;ID2;A:0.0766,9.5337,-0.6081;G:-0.0069,0.0048,-0.0218;ID2;A:0.0814,9.5720,-0.5124;G:-0.0101,0.0069,-0.0208;ID2;A:0.1006,9.5720,-0.5315;G:-0.0133,0.0053,-0.0192;ID2;A:0.0431,9.5816,-0.5555;G:-0.0154,0.0037,-0.0181;ID2;A:0.0814,9.5720,-0.5459;G:-0.0128,0.0005,-0.0186;ID2;A:0.0766,9.5481,-0.5315;G:-0.0128,0.0053,-0.0250;ID2;A:0.1101,9.5433,-0.5315;G:-0.0101,0.0069,-0.0176;ID2;A:0.1053,9.5912,-0.5794;G:-0.0096,0.0059,-0.0181;ID2;A:0.0479,9.5864,-0.5507;G:-0.0128,0.0080,-0.0202;ID2;A:0.0910,9.5960,-0.5650;G:-0.0149,0.0080,-0.0234;ID2;A:0.0479,9.6103,-0.5650;G:-0.0096,0.0021,-0.0181;ID2;A:0.0575,9.5960,-0.6081;G:-0.0138,0.0085,-0.0192;ID2;A:0.0622,9.5960,-0.5219;G:-0.0144,0.0043,-0.0181;ID2;A:0.0622,9.5768,-0.6033;G:-0.0096,0.0053,-0.0218;ID2;A:0.1053,9.5529,-0.5267;G:-0.0128,0.0074,-0.0165;ID2;A:0.0910,9.6007,-0.5459;G:-0.0133,0.0080,-0.0223;ID2;A:0.0622,9.6103,-0.5028;G:-0.0090,0.0021,-0.0186;ID2;A:0.1149,9.5864,-0.5698;G:-0.0112,0.0069,-0.0186;ID2;A:0.0670,9.5577,-0.5746;G:-0.0101,0.0059,-0.0229;ID2;A:0.0718,9.5385,-0.5794;G:-0.0154,0.0069,-0.0218;ID2;A:0.0814,9.5481,-0.5363;G:-0.0149,0.0064,-0.0197;ID2;A:0.0910,9.6103,-0.5267;G:-0.0138,0.0048,-0.0234;ID2;A:0.0862,9.5577,-0.5746;G:-0.0122,0.0037,-0.0165;ID2;A:0.1053,9.5768,-0.5698;G:-0.0122,0.0064,-0.0213;ID2;A:0.0431,9.5624,-0.5171;G:-0.0160,0.0074,-0.0202;ID2;A:0.0910,9.6247,-0.5890;G:-0.0074,0.0053,-0.0170;ID2;A:0.0575,9.5912,-0.5459;G:-0.0149,0.0059,-0.0218;ID2;A:0.0718,9.5529,-0.5794;G:-0.0122,0.0053,-0.0192;ID2;A:0.1772,9.5529,-0.1820;G:-0.0069,0.0059,-0.0112;ID2;A:0.0239,9.5816,-0.4070;G:-0.0266,0.0043,-0.0229;ID2;A:0.0670,9.5002,-0.6752;G:-0.0154,0.0059,-0.0192;ID2;A:0.1053,9.5720,-0.6704;G:-0.0059,0.0059,-0.0170;ID2;A:0.0910,9.5720,-0.6800;G:-0.0011,0.0053,-0.0154;ID2;A:0.0958,9.5624,-0.4884;G:-0.0011,0.0096,-0.0144;ID2;A:0.0718,9.5864,-0.6225;G:-0.0053,0.0080,-0.0192;ID2;A:0.0958,9.5672,-0.6129;G:-0.0074,0.0059,-0.0186;ID2;A:0.0622,9.5433,-0.5650;G:-0.0176,0.0112,-0.0197;ID2;A:0.0479,9.5337,-0.4980;G:-0.0117,0.0037,-0.0160;ID2;A:0.1197,9.5720,-0.5938;G:-0.0074,0.0090,-0.0138;ID2;A:-0.2969,9.4332,-0.5555;G:-0.0090,0.0074,-0.0165;ID2;A:-0.0575,9.5289,-0.6512;G:-0.0117,0.0048,-0.0213;ID2;A:0.0383,9.5289,-0.6512;G:-0.0133,0.0085,-0.0208;ID2;A:0.0335,9.5529,-0.5315;G:-0.0106,0.0053,-0.0223;ID2;A:0.0958,9.5960,-0.5555;G:-0.0128,0.0021,-0.0197;ID2;A:0.0718,9.5768,-0.5507;G:-0.0149,0.0069,-0.0176;ID2;A:0.0622,9.5529,-0.4741;G:-0.0128,0.0059,-0.0186;ID2;A:0.0383,9.5433,-0.5267;G:-0.0090,0.0085,-0.0160;ID2;A:0.0048,9.5146,-0.5746;G:-0.0117,0.0117,-0.0229;ID2;A:0.0431,9.5720,-0.5411;G:-0.0106,0.0048,-0.0154;ID2;A:0.1389,9.6438,-0.5602;G:-0.0144,0.0059,-0.0202;ID2;A:0.0527,9.6055,-0.5028;G:-0.0154,0.0059,-0.0186;ID2;A:0.0670,9.5481,-0.5411;G:-0.0106,0.0053,-0.0186;ID2;A:0.1006,9.5816,-0.5938;G:-0.0122,0.0080,-0.0239;ID2;A:0.0814,9.5768,-0.4884;G:-0.0133,0.0064,-0.0208;ID2;A:0.0622,9.5864,-0.5746;G:-0.0090,0.0101,-0.0213;ID2;A:0.0479,9.6055,-0.5650;G:-0.0128,0.0064,-0.0229;ID2;A:0.0910,9.5577,-0.5315;G:-0.0138,0.0090,-0.0192;ID2;A:0.0192,9.5960,-0.5124;G:-0.0117,0.0027,-0.0234;End2;Start3;ID3;A:0.2251,9.6199,-1.1444;G:-0.0112,0.0750,-0.0372;ID3;A:0.2346,9.6247,-1.0678;G:-0.0149,0.0819,-0.0442;ID3;A:0.1772,9.5720,-1.0295;G:-0.0128,0.0782,-0.0426;ID3;A:0.2059,9.5960,-1.0678;G:-0.0176,0.0819,-0.0447;ID3;A:0.2011,9.5912,-1.0487;G:-0.0133,0.0825,-0.0394;ID3;A:0.1628,9.6055,-1.0582;G:-0.0149,0.0750,-0.0388;ID3;A:0.1532,9.6151,-1.0678;G:-0.0133,0.0793,-0.0415;ID3;A:0.1724,9.6199,-1.0199;G:-0.0128,0.0803,-0.0404;ID3;A:0.2203,9.5912,-1.0582;G:-0.0133,0.0788,-0.0426;ID3;A:0.2155,9.6055,-1.0726;G:-0.0144,0.0803,-0.0415;ID3;A:0.1867,9.5672,-1.0726;G:-0.0149,0.0819,-0.0383;ID3;A:0.1676,9.5912,-1.0726;G:-0.0122,0.0745,-0.0431;ID3;A:0.2251,9.5672,-1.0487;G:-0.0186,0.0835,-0.0410;ID3;A:0.2107,9.6103,-1.0487;G:-0.0128,0.0825,-0.0415;ID3;A:0.1820,9.6199,-1.0295;G:-0.0144,0.0803,-0.0394;ID3;A:0.1867,9.6295,-1.1013;G:-0.0138,0.0803,-0.0447;ID3;A:0.1963,9.6103,-1.0247;G:-0.0128,0.0851,-0.0431;ID3;A:0.1867,9.5912,-1.0104;G:-0.0117,0.0788,-0.0436;ID3;A:0.1867,9.5912,-1.0822;G:-0.0133,0.0782,-0.0357;ID3;A:0.1437,9.6343,-1.1013;G:-0.0138,0.0788,-0.0404;ID3;A:0.1820,9.6103,-1.0295;G:-0.0128,0.0793,-0.0388;ID3;A:0.1772,9.5960,-1.0726;G:-0.0101,0.0766,-0.0399;ID3;A:0.1724,9.5816,-1.0726;G:-0.0122,0.0825,-0.0410;ID3;A:0.2251,9.6007,-1.0534;G:-0.0106,0.0803,-0.0447;ID3;A:0.2394,9.5816,-1.0487;G:-0.0117,0.0846,-0.0431;ID3;A:0.2059,9.6199,-1.0391;G:-0.0160,0.0761,-0.0399;ID3;A:0.1293,9.5577,-0.9960;G:-0.0122,0.0809,-0.0452;ID3;A:0.1676,9.5337,-1.0870;G:-0.0138,0.0857,-0.0431;ID3;A:0.2011,9.5720,-1.0534;G:-0.0112,0.0809,-0.0410;ID3;A:0.1915,9.6534,-1.0439;G:-0.0154,0.0793,-0.0431;ID3;A:0.1867,9.6438,-1.0582;G:-0.0138,0.0857,-0.0463;ID3;A:0.1676,9.6295,-1.0582;G:-0.0112,0.0819,-0.0415;ID3;A:0.1724,9.6247,-1.0918;G:-0.0144,0.0803,-0.0442;ID3;A:0.2059,9.5912,-1.0918;G:-0.0138,0.0734,-0.0394;ID3;A:0.1963,9.6295,-1.0774;G:-0.0149,0.0803,-0.0420;ID3;A:0.2059,9.6151,-1.0439;G:-0.0096,0.0857,-0.0415;ID3;A:0.1484,9.6295,-1.0965;G:-0.0138,0.0756,-0.0420;ID3;A:0.1915,9.6391,-1.0774;G:-0.0101,0.0803,-0.0415;ID3;A:0.1867,9.5864,-1.0965;G:-0.0133,0.0782,-0.0420;ID3;A:0.2203,9.6151,-1.1157;G:-0.0112,0.0793,-0.0447;ID3;A:0.2298,9.5146,-1.0391;G:-0.0096,0.0798,-0.0452;ID3;A:0.1628,9.5960,-1.0295;G:-0.0112,0.0819,-0.0436;ID3;A:0.1963,9.5720,-1.0726;G:-0.0122,0.0788,-0.0415;ID3;A:0.1915,9.5816,-1.1349;G:-0.0170,0.0814,-0.0468;ID3;A:0.1915,9.5672,-1.1061;G:-0.0192,0.0819,-0.0452;ID3;A:0.1963,9.6151,-1.0774;G:-0.0128,0.0841,-0.0431;ID3;A:0.1963,9.5864,-1.0343;G:-0.0133,0.0777,-0.0420;ID3;A:0.1628,9.5864,-1.0487;G:-0.0128,0.0772,-0.0426;ID3;A:0.1963,9.6151,-1.0678;G:-0.0149,0.0819,-0.0436;ID3;A:0.1963,9.6055,-1.0726;G:-0.0117,0.0798,-0.0447;ID3;A:0.1724,9.6199,-1.0391;G:-0.0101,0.0793,-0.0468;ID3;A:0.1724,9.6055,-1.0534;G:-0.0160,0.0819,-0.0442;ID3;A:0.1628,9.5864,-1.0726;G:-0.0154,0.0814,-0.0436;ID3;A:0.1915,9.6582,-1.1492;G:-0.0176,0.0825,-0.0415;ID3;A:0.1724,9.6007,-1.0487;G:-0.0133,0.0819,-0.0431;ID3;A:0.1867,9.5912,-1.0199;G:-0.0133,0.0756,-0.0410;ID3;A:0.2203,9.6438,-1.0439;G:-0.0128,0.0825,-0.0399;ID3;A:0.1676,9.5912,-1.0774;G:-0.0176,0.0803,-0.0415;ID3;A:0.2011,9.5912,-1.0343;G:-0.0170,0.0793,-0.0410;ID3;A:0.1867,9.5768,-1.0726;G:-0.0117,0.0803,-0.0410;End3;"
    #parsed = data_processor.parse_data(raw)
    #formated = data_processor.format_data(parsed)

    raw = "Start1;ID1;A:1.8106,7.6305,-6.4809;G:0.6444,-0.5901,0.5635;ID1;A:0.7616,6.9551,-6.9216;G:0.1751,-0.9434,0.1692;ID1;A:0.3928,6.7061,-6.5767;G:-0.1713,0.1979,-0.1485;ID1;A:0.7137,7.5395,-5.8199;G:-0.1953,-0.4182,-0.0724;ID1;A:0.1629,7.6449,-5.7145;G:-0.1783,0.0708,-0.0527;ID1;A:0.5461,7.4964,-6.0594;G:-0.0750,0.1352,-0.0170;ID1;A:0.3640,7.5683,-6.3037;G:-0.0644,0.0963,-0.0825;ID1;A:0.7329,7.3144,-6.1265;G:-0.0271,0.0633,-0.1724;ID1;A:-0.0575,7.8844,-5.9444;G:0.0644,0.0867,-0.0250;ID1;A:0.4359,7.4677,-5.9971;G:0.1868,0.0591,0.0149;ID1;A:0.6323,7.3910,-6.2462;G:0.0729,0.1298,-0.0463;ID1;A:0.6083,7.3910,-6.1073;G:0.0729,0.0937,-0.1245;ID1;A:0.5317,7.3527,-6.1552;G:0.0527,0.0580,-0.0798;ID1;A:0.3593,7.4341,-6.2127;G:0.0474,0.0676,-0.0905;ID1;A:0.1964,7.5156,-6.1552;G:0.0676,0.0942,-0.0607;ID1;A:0.2443,7.4868,-6.2271;G:0.0229,0.0458,0.0165;ID1;A:0.3401,7.4150,-6.2654;G:0.0351,0.0436,-0.0144;ID1;A:0.2491,7.4437,-6.1600;G:0.0905,0.0506,-0.0383;ID1;A:0.2251,7.4150,-6.3420;G:0.0878,0.0628,-0.0234;ID1;A:0.1964,7.4964,-6.3372;G:0.0436,0.0261,-0.0138;ID1;A:0.4694,7.4006,-6.2702;G:-0.0005,0.0277,-0.0500;ID1;A:0.2587,7.4437,-6.1360;G:0.0250,0.0388,-0.0452;ID1;A:0.3497,7.3000,-6.2175;G:0.0484,0.0463,-0.0458;ID1;A:0.2443,7.3575,-6.2989;G:0.0809,0.0319,0.0117;ID1;A:0.3305,7.3671,-6.3468;G:0.0367,0.0617,0.0043;ID1;A:0.1868,7.4437,-6.2702;G:0.0346,0.0106,-0.0218;ID1;A:0.4455,7.2569,-6.2893;G:0.0186,0.0378,-0.0431;ID1;A:0.4455,7.4150,-6.1456;G:0.0234,0.0905,-0.0681;ID1;A:0.2874,7.3671,-6.3276;G:0.0415,0.0521,-0.0037;ID1;A:0.2108,7.4725,-6.2414;G:-0.0144,0.0287,-0.0154;ID1;A:0.3114,7.4725,-6.2271;G:0.0128,0.0410,0.0112;ID1;A:0.3593,7.4102,-6.1360;G:-0.0165,-0.0484,0.0921;ID1;A:0.2395,7.5539,-6.2510;G:0.0303,0.0271,0.0532;ID1;A:0.3880,7.4677,-6.0163;G:0.0176,0.0937,0.0059;ID1;A:0.2299,7.5299,-6.2175;G:0.0341,0.0798,-0.0085;ID1;A:0.3018,7.6257,-6.0594;G:-0.0314,0.0878,-0.0436;ID1;A:0.2299,7.6928,-5.9396;G:-0.1022,0.0750,-0.0617;ID1;A:0.3688,7.6689,-5.7720;G:-0.0798,0.1490,-0.0841;End1;Start2;ID2;A:0.1867,9.5768,-0.5555;G:-0.0144,0.0064,-0.0186;ID2;A:0.2298,9.5433,-0.6177;G:-0.0165,0.0053,-0.0192;ID2;A:0.1963,9.5768,-0.5938;G:-0.0133,0.0064,-0.0170;ID2;A:0.2203,9.5577,-0.5124;G:-0.0154,0.0064,-0.0202;ID2;A:0.2203,9.5672,-0.5938;G:-0.0149,0.0053,-0.0208;ID2;A:0.1820,9.6151,-0.5746;G:-0.0170,0.0048,-0.0239;ID2;A:0.2586,9.6199,-0.5938;G:-0.0122,0.0085,-0.0229;ID2;A:0.1532,9.5816,-0.5842;G:-0.0160,0.0064,-0.0197;ID2;A:0.2251,9.6055,-0.5938;G:-0.0144,0.0085,-0.0208;ID2;A:0.2251,9.5816,-0.5363;G:-0.0170,0.0032,-0.0170;ID2;A:0.2251,9.5720,-0.5938;G:-0.0154,0.0080,-0.0176;ID2;A:0.1676,9.5481,-0.5698;G:-0.0181,0.0080,-0.0239;ID2;A:0.2155,9.5720,-0.5602;G:-0.0144,0.0053,-0.0192;ID2;A:0.2011,9.5912,-0.6225;G:-0.0144,0.0085,-0.0213;ID2;A:0.2107,9.5960,-0.6129;G:-0.0149,0.0096,-0.0181;ID2;A:0.2107,9.5385,-0.5555;G:-0.0154,0.0048,-0.0223;ID2;A:0.1676,9.5720,-0.5650;G:-0.0154,0.0064,-0.0223;ID2;A:0.2107,9.5864,-0.5890;G:-0.0160,0.0080,-0.0197;ID2;A:0.1963,9.5816,-0.5555;G:-0.0117,0.0069,-0.0181;ID2;A:0.2203,9.6055,-0.6033;G:-0.0149,0.0064,-0.0218;ID2;A:0.2107,9.5624,-0.6129;G:-0.0154,0.0090,-0.0176;ID2;A:0.2107,9.5816,-0.5794;G:-0.0186,0.0032,-0.0170;ID2;A:0.2155,9.5433,-0.6129;G:-0.0181,0.0053,-0.0176;ID2;A:0.2298,9.5481,-0.5124;G:-0.0117,0.0074,-0.0192;ID2;A:0.1820,9.5960,-0.5411;G:-0.0165,0.0080,-0.0181;ID2;A:0.2155,9.5864,-0.5171;G:-0.0096,0.0090,-0.0234;ID2;A:0.1724,9.5960,-0.5459;G:-0.0181,0.0059,-0.0122;ID2;A:0.2107,9.5816,-0.5267;G:-0.0170,0.0080,-0.0223;ID2;A:0.2155,9.6007,-0.5794;G:-0.0144,0.0080,-0.0234;ID2;A:0.2011,9.5672,-0.5938;G:-0.0133,0.0053,-0.0170;ID2;A:0.1963,9.5624,-0.5890;G:-0.0138,0.0074,-0.0218;ID2;A:0.1820,9.6247,-0.5219;G:-0.0160,0.0064,-0.0186;ID2;A:0.1963,9.5577,-0.5794;G:-0.0122,0.0122,-0.0202;ID2;A:0.2011,9.5624,-0.6177;G:-0.0181,0.0064,-0.0229;ID2;A:0.2059,9.5624,-0.5746;G:-0.0122,0.0090,-0.0266;ID2;A:0.2298,9.5768,-0.5890;G:-0.0112,0.0090,-0.0202;ID2;A:0.2059,9.5577,-0.5794;G:-0.0138,0.0080,-0.0186;ID2;A:0.2298,9.5816,-0.5986;G:-0.0170,0.0080,-0.0239;ID2;A:0.2011,9.5864,-0.5171;G:-0.0170,0.0080,-0.0229;ID2;A:0.1963,9.5577,-0.5650;G:-0.0208,0.0048,-0.0197;ID2;A:0.2059,9.5577,-0.5602;G:-0.0160,0.0080,-0.0186;ID2;A:0.2298,9.5672,-0.5411;G:-0.0160,0.0043,-0.0186;ID2;A:0.1915,9.6151,-0.5219;G:-0.0122,0.0085,-0.0192;ID2;A:0.2011,9.5768,-0.5363;G:-0.0117,0.0101,-0.0197;ID2;A:0.2059,9.5816,-0.5890;G:-0.0165,0.0090,-0.0229;ID2;A:0.1963,9.5672,-0.5938;G:-0.0176,0.0064,-0.0218;ID2;A:0.2011,9.5672,-0.5890;G:-0.0170,0.0064,-0.0271;ID2;A:0.2155,9.5624,-0.5890;G:-0.0138,0.0027,-0.0144;ID2;A:0.1963,9.6055,-0.5555;G:-0.0122,0.0074,-0.0186;ID2;A:0.2298,9.5672,-0.5986;G:-0.0176,0.0064,-0.0218;ID2;A:0.1963,9.5960,-0.5267;G:-0.0160,0.0074,-0.0176;ID2;A:0.2011,9.5768,-0.5602;G:-0.0149,0.0090,-0.0255;ID2;A:0.2203,9.5385,-0.5124;G:-0.0154,0.0085,-0.0186;ID2;A:0.1820,9.5816,-0.5650;G:-0.0138,0.0085,-0.0239;ID2;A:0.1820,9.5289,-0.5938;G:-0.0160,0.0059,-0.0208;ID2;A:0.2251,9.5768,-0.6704;G:-0.0112,0.0053,-0.0197;ID2;A:0.2011,9.5864,-0.5794;G:-0.0128,0.0059,-0.0218;ID2;A:0.1963,9.5864,-0.5698;G:-0.0170,0.0112,-0.0245;ID2;A:0.1963,9.5289,-0.5555;G:-0.0112,0.0069,-0.0208;ID2;A:0.2538,9.5529,-0.4980;G:-0.0192,0.0085,-0.0192;Start3;ID3;A:0.0862,9.6247,-1.1875;G:-0.0122,0.0835,-0.0442;ID3;A:0.1006,9.6103,-1.2258;G:-0.0149,0.0782,-0.0474;ID3;A:0.0814,9.6007,-1.2115;G:-0.0149,0.0835,-0.0458;ID3;A:0.0622,9.6199,-1.2306;G:-0.0117,0.0788,-0.0474;ID3;A:0.1101,9.6534,-1.1971;G:-0.0096,0.0798,-0.0442;ID3;A:0.0766,9.6295,-1.1732;G:-0.0149,0.0814,-0.0415;ID3;A:0.0814,9.6247,-1.2498;G:-0.0154,0.0782,-0.0436;ID3;A:0.0670,9.6199,-1.2402;G:-0.0165,0.0793,-0.0458;ID3;A:0.1053,9.6151,-1.2306;G:-0.0149,0.0819,-0.0447;ID3;A:0.0670,9.6247,-1.2306;G:-0.0133,0.0766,-0.0458;ID3;A:0.1053,9.6534,-1.1588;G:-0.0149,0.0772,-0.0452;ID3;A:0.1006,9.6582,-1.1875;G:-0.0133,0.0798,-0.0458;ID3;A:0.0814,9.6295,-1.2115;G:-0.0117,0.0835,-0.0479;ID3;A:0.0862,9.6199,-1.1540;G:-0.0133,0.0772,-0.0442;ID3;A:0.1006,9.5816,-1.2450;G:-0.0154,0.0788,-0.0447;ID3;A:0.0622,9.6007,-1.1779;G:-0.0144,0.0803,-0.0463;ID3;A:0.0910,9.5912,-1.1396;G:-0.0149,0.0756,-0.0468;ID3;A:0.0910,9.6151,-1.2067;G:-0.0122,0.0793,-0.0426;ID3;A:0.1006,9.6247,-1.2067;G:-0.0112,0.0809,-0.0495;ID3;A:0.0718,9.6343,-1.2067;G:-0.0128,0.0841,-0.0468;ID3;A:0.0766,9.6295,-1.2115;G:-0.0176,0.0814,-0.0436;ID3;A:0.0958,9.6534,-1.1684;G:-0.0154,0.0825,-0.0463;ID3;A:0.0814,9.5960,-1.1923;G:-0.0160,0.0761,-0.0436;ID3;A:0.0814,9.6007,-1.2115;G:-0.0133,0.0809,-0.0490;ID3;A:0.0718,9.6247,-1.2402;G:-0.0112,0.0819,-0.0436;ID3;A:0.0527,9.6343,-1.1779;G:-0.0133,0.0793,-0.0420;ID3;A:0.0622,9.6103,-1.2019;G:-0.0160,0.0788,-0.0415;ID3;A:0.0575,9.6151,-1.2641;G:-0.0133,0.0793,-0.0484;ID3;A:0.1149,9.6438,-1.1923;G:-0.0112,0.0825,-0.0436;ID3;A:0.0383,9.6391,-1.2210;G:-0.0096,0.0772,-0.0463;ID3;A:0.0622,9.6295,-1.2019;G:-0.0160,0.0766,-0.0415;ID3;A:0.0862,9.6247,-1.1875;G:-0.0101,0.0803,-0.0511;ID3;A:0.0575,9.6103,-1.1971;G:-0.0122,0.0803,-0.0447;ID3;A:0.0910,9.6582,-1.1971;G:-0.0128,0.0814,-0.0452;ID3;A:0.1006,9.6391,-1.1779;G:-0.0122,0.0819,-0.0447;ID3;A:0.0479,9.6486,-1.2210;G:-0.0112,0.0777,-0.0383;ID3;A:0.0718,9.6247,-1.1444;G:-0.0122,0.0835,-0.0479;ID3;A:0.1053,9.6151,-1.1923;G:-0.0160,0.0788,-0.0431;ID3;A:0.0383,9.6055,-1.1684;G:-0.0128,0.0793,-0.0479;ID3;A:0.0622,9.6199,-1.2067;G:-0.0149,0.0793,-0.0447;Start4;ID4;A:-0.0431,9.7252,-1.5275;G:-0.0468,0.0468,-0.0176;ID4;A:0.0096,9.7157,-1.4940;G:-0.0468,0.0463,-0.0186;ID4;A:-0.0239,9.7444,-1.5371;G:-0.0452,0.0474,-0.0165;ID4;A:-0.0718,9.7492,-1.5227;G:-0.0447,0.0458,-0.0197;ID4;A:0.0287,9.7205,-1.4605;G:-0.0463,0.0458,-0.0208;ID4;A:-0.0096,9.7157,-1.5227;G:-0.0468,0.0420,-0.0149;ID4;A:-0.0287,9.7061,-1.4988;G:-0.0463,0.0468,-0.0160;ID4;A:-0.0096,9.7348,-1.4605;G:-0.0463,0.0452,-0.0186;ID4;A:-0.0096,9.7157,-1.5227;G:-0.0452,0.0426,-0.0229;ID4;A:0.0144,9.7348,-1.4700;G:-0.0484,0.0495,-0.0181;ID4;A:-0.0144,9.6965,-1.4892;G:-0.0452,0.0452,-0.0176;ID4;A:-0.0048,9.7540,-1.5610;G:-0.0490,0.0452,-0.0165;ID4;A:-0.0096,9.7252,-1.4844;G:-0.0474,0.0447,-0.0176;ID4;A:0.0000,9.7300,-1.5658;G:-0.0442,0.0436,-0.0181;ID4;A:-0.0144,9.7731,-1.4940;G:-0.0431,0.0463,-0.0192;ID4;A:-0.0096,9.6965,-1.5323;G:-0.0436,0.0490,-0.0192;ID4;A:0.0000,9.7348,-1.5131;G:-0.0452,0.0452,-0.0213;ID4;A:-0.0048,9.7109,-1.5467;G:-0.0426,0.0458,-0.0176;ID4;A:-0.0431,9.7157,-1.4892;G:-0.0463,0.0431,-0.0192;ID4;A:-0.0383,9.6965,-1.4557;G:-0.0527,0.0431,-0.0229;ID4;A:0.0239,9.7157,-1.5227;G:-0.0490,0.0458,-0.0181;ID4;A:-0.0622,9.6869,-1.5419;G:-0.0463,0.0442,-0.0181;ID4;A:-0.0144,9.7205,-1.5802;G:-0.0463,0.0426,-0.0176;ID4;A:-0.0144,9.7300,-1.4988;G:-0.0463,0.0436,-0.0213;ID4;A:0.0192,9.7396,-1.4940;G:-0.0452,0.0463,-0.0239;ID4;A:-0.0335,9.7492,-1.5179;G:-0.0484,0.0431,-0.0218;ID4;A:-0.0287,9.6869,-1.5514;G:-0.0447,0.0426,-0.0176;ID4;A:0.0335,9.7205,-1.5514;G:-0.0495,0.0431,-0.0192;ID4;A:-0.0192,9.7109,-1.5514;G:-0.0458,0.0431,-0.0165;ID4;A:-0.0527,9.7205,-1.4365;G:-0.0474,0.0447,-0.0165;ID4;A:-0.0527,9.7348,-1.5658;G:-0.0452,0.0484,-0.0223;ID4;A:-0.0287,9.7252,-1.5036;G:-0.0436,0.0404,-0.0197;ID4;A:0.0048,9.7205,-1.5275;G:-0.0452,0.0442,-0.0218;ID4;A:0.0192,9.7252,-1.5323;G:-0.0479,0.0468,-0.0186;ID4;A:-0.0144,9.7013,-1.4892;G:-0.0500,0.0436,-0.0160;ID4;A:0.0383,9.6917,-1.4988;G:-0.0436,0.0431,-0.0165;ID4;A:0.0048,9.7348,-1.5275;G:-0.0479,0.0463,-0.0170;ID4;A:-0.0335,9.7013,-1.4222;G:-0.0474,0.0474,-0.0165;ID4;A:-0.0048,9.7588,-1.5419;G:-0.0490,0.0436,-0.0208;ID4;A:-0.0192,9.7444,-1.5419;G:-0.0436,0.0426,-0.0192;"
    correct = data_processor.correct_data(raw)
    parsed = data_processor.parse_data(correct)
    formatted = data_processor.format_data(parsed)


def correct_data(raw):
    """
    Analizza una stringa di dati da sensori e aggiunge i tag 'End' mancanti.

    Args:
        dati_grezzi: La stringa di dati non elaborata, con elementi separati da ';'.

    Returns:
        Una stringa di dati corretta con tutti i blocchi
        opportunamente chiusi da un tag End<N>.
    """
    components = [part for part in raw.split(';') if part]
    if not components:
        return ""
    correct_parts = []
    id = None
    for comp in components:
        if comp.startswith('Start'):
            if id is not None:
                correct_parts.append(f"End{id}")
            match = re.search(r'\d+', comp)
            if match:
                id = match.group(0)
            correct_parts.append(comp)
        elif comp.startswith('End'):
            correct_parts.append(comp)
            id = None
        else:
            correct_parts.append(comp)
    if id is not None:
        correct_parts.append(f"End{id}")

    return ';'.join(correct_parts)