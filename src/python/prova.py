import sys
import requests
import datetime
import time
import re
import traceback
import string
import pandas as pd
import numpy as np
from joblib import load

# --- Costanti e Configurazioni 
URL_FETCH = "http://192.168.4.1/"
URL_DELETE = f"{URL_FETCH}delete"
MODEL_PATH = 'C:\\Users\\giuli\\Desktop\\Code\\TKDTS\\model\\rf_model.sav'

TIMESTEPS = 20 # numero di prese dati per calcio
NUM_DATA_PER_TIMESTEP = 24 # totale dati per presa
EXPECTED_DATA_COLUMNS = NUM_DATA_PER_TIMESTEP * TIMESTEPS # colonne csv
EXPECTED_ESP_IDS = [str(i + 1) for i in range(4)] # ids esp
MAX_FETCH_ATTEMPTS = 2
RETRY_DELAY_SECONDS = 2
NUM_BOARDS = 4
SENSORS = ['A', 'G']
AXES = ['x', 'y', 'z']
N_DATA = TIMESTEPS * NUM_BOARDS * len(SENSORS) * len(AXES)

# --- Funzioni di Elaborazione Dati 
def generate_column_names(num_timesteps):
    column_names = []
    for i in range(num_timesteps):
        suffix = f"_{i + 1}"
        for sensor_type in SENSORS:
            for board_id in range(1, NUM_BOARDS + 1):
                for axis in AXES:
                    col_name = f"{sensor_type}{board_id}{axis}{suffix}"
                    column_names.append(col_name)
    return column_names

def parse_data(raw_data, expected_ids_list, target_timesteps):
    number_pattern = r'-?\d+\.?\d*'

    # PerchÃ¨ i dati registrati dal master sono sempre di meno di quelli registrati dagli slave?
    data = {esp_id: [] for esp_id in expected_ids_list}
    data_list = []
    
    for esp_id in expected_ids_list:
        last_start_idx = raw_data.rfind(f"Start{esp_id};")
        last_end_idx = raw_data.find(f"End{esp_id};", last_start_idx + len(f"Start{esp_id};"))
        if last_end_idx != -1 and last_start_idx != -1:
            esp_block = raw_data[last_start_idx + len(f"Start{esp_id};") : last_end_idx]
            esp_block = esp_block.replace(f"ID{esp_id}", "")
            data[esp_id] = [float(num_str) for num_str in re.findall(number_pattern, esp_block)]
            data_list.append([float(num_str) for num_str in re.findall(number_pattern, esp_block)])     
    
    active_esp_ids2 = [str(esp_id + 1) for esp_id in range(len(data_list))]
    print(active_esp_ids2)
    active_esp_ids = [esp_id for esp_id in expected_ids_list if data.get(esp_id)]
    print(active_esp_ids)
    samples_counts = [(len(data_list[int(esp_id) - 1]) / 6) for esp_id in active_esp_ids]
    min_samples = min(samples_counts)
    
    if target_timesteps > 0 and len(samples_counts) != 4: 
        raise Exception(f"{4 - len(samples_counts)} of the ESP32 didn't send any data")

    elif min_samples < target_timesteps:
            raise Exception(f"Samples available ({min_samples}) < target ({target_timesteps})")
    
    for esp in range(NUM_BOARDS):
        data_to_eliminate = int(-6 * (samples_counts[int(esp)] - min_samples) - 1)
        print(data_list[esp][-1:data_to_eliminate:-1])
        del data_list[esp][-1:data_to_eliminate:-1]
    
    return data

raw = "Start1;ID1;A:2.2130,7.6162,-3.9374;G:0.8216,0.1580,0.4209;ID1;A:4.3302,6.9072,-5.2116;G:1.4942,-1.3516,-0.6151;ID1;A:2.3136,7.2521,-5.4654;G:0.4922,-0.5901,-0.1341;ID1;A:3.7746,6.8737,-5.8870;G:0.0277,-0.4150,-0.0255;ID1;A:2.3423,7.0701,-5.0727;G:-0.7668,-1.0328,-0.4911;ID1;A:2.4046,7.5922,-5.3217;G:0.0277,0.0474,-0.0511;ID1;A:2.3136,7.5252,-5.4175;G:-0.1171,-0.7918,-0.3517;ID1;A:1.9735,7.6449,-5.7049;G:0.1080,0.0532,0.0564;ID1;A:1.6909,7.5347,-5.4750;G:0.0990,-0.1149,0.0122;ID1;A:1.6621,7.8365,-5.7289;G:0.0686,-0.2543,0.0144;ID1;A:1.8585,7.6066,-5.8007;G:0.0591,-0.1107,-0.1006;ID1;A:1.6142,7.6689,-5.7145;G:-0.0458,-0.1080,-0.0607;ID1;A:1.5999,7.7407,-5.5469;G:0.0234,-0.0750,0.0000;ID1;A:1.4514,7.7551,-5.6666;G:-0.0053,-0.0415,0.0383;ID1;A:1.7005,7.5731,-5.4319;G:-0.0218,-0.0585,0.0208;ID1;A:1.3987,7.7359,-5.6283;G:-0.0048,-0.0740,-0.0479;ID1;A:1.4658,7.8078,-5.6570;G:-0.0596,-0.2230,-0.0612;ID1;A:0.6993,7.9946,-5.4894;G:0.0862,-0.1447,0.0085;ID1;A:1.1352,7.8030,-5.4463;G:-0.0011,0.0607,0.0085;ID1;A:1.3364,7.7263,-5.3984;G:-0.0011,-0.0229,0.0074;ID1;A:1.3316,7.8078,-5.5085;G:-0.0170,-0.0021,-0.0160;ID1;A:1.4322,7.5826,-5.4415;G:-0.0011,0.0963,-0.0665;ID1;A:1.2310,7.7311,-5.3313;G:-0.0197,0.0138,-0.0756;ID1;A:1.1209,7.8461,-5.4271;G:-0.0229,0.0319,0.0144;ID1;A:1.2167,7.8700,-5.4846;G:0.0064,-0.0239,0.0090;ID1;A:1.1496,7.8317,-5.3217;G:0.0277,0.0511,0.0372;ID1;A:1.2646,7.6401,-5.3265;G:0.1634,0.3544,-0.1320;ID1;A:0.7808,7.4533,-5.4271;G:0.1415,0.4629,-0.2299;ID1;A:1.4945,7.6018,-4.6032;G:0.4257,0.3363,-0.1362;End1;Start2;ID2;A:-0.2203,0.7135,-9.6678;G:-0.0197,0.0218,-0.0223;ID2;A:-0.2538,0.7326,-9.6438;G:-0.0181,0.0181,-0.0154;ID2;A:-0.2107,0.7230,-9.7013;G:-0.0208,0.0069,-0.0208;ID2;A:-0.2777,0.7614,-9.7540;G:-0.0223,0.0000,-0.0176;ID2;A:-0.2682,0.6847,-9.6774;G:-0.0149,0.0144,-0.0192;ID2;A:-0.2298,0.6752,-9.6678;G:-0.0181,0.0149,-0.0213;ID2;A:-0.2251,0.7183,-9.7013;G:-0.0170,0.0117,-0.0154;ID2;A:-0.2490,0.7326,-9.7205;G:-0.0223,0.0101,-0.0208;ID2;A:-0.2490,0.7278,-9.6678;G:-0.0197,0.0160,-0.0186;ID2;A:-0.2538,0.7183,-9.6726;G:-0.0213,0.0160,-0.0245;ID2;A:-0.2442,0.7230,-9.6199;G:-0.0144,0.0128,-0.0234;ID2;A:-0.2203,0.7278,-9.6343;G:-0.0208,0.0170,-0.0293;ID2;A:-0.2203,0.7278,-9.6726;G:-0.0234,0.0144,-0.0250;ID2;A:-0.2394,0.7326,-9.7013;G:-0.0208,0.0165,-0.0223;ID2;A:-0.2059,0.7087,-9.7588;G:-0.0192,0.0069,-0.0192;ID2;A:-0.2538,0.7230,-9.6582;G:-0.0202,0.0106,-0.0213;ID2;A:-0.2298,0.7614,-9.6774;G:-0.0197,0.0181,-0.0218;ID2;A:-0.2490,0.7374,-9.6917;G:-0.0186,0.0170,-0.0234;ID2;A:-0.2394,0.6943,-9.6965;G:-0.0192,0.0186,-0.0250;ID2;A:-0.2586,0.7039,-9.6726;G:-0.0181,0.0149,-0.0234;ID2;A:-0.2682,0.7087,-9.6343;G:-0.0192,0.0144,-0.0197;ID2;A:-0.2634,0.7183,-9.6726;G:-0.0170,0.0160,-0.0266;ID2;A:-0.2634,0.7326,-9.6774;G:-0.0223,0.0165,-0.0186;ID2;A:-0.2682,0.7470,-9.7300;G:-0.0213,0.0165,-0.0197;ID2;A:-0.2346,0.7374,-9.6343;G:-0.0218,0.0176,-0.0229;ID2;A:-0.2394,0.7278,-9.6822;G:-0.0208,0.0117,-0.0202;ID2;A:-0.2203,0.7230,-9.6247;G:-0.0208,0.0122,-0.0239;ID2;A:-0.2155,0.7566,-9.6486;G:-0.0181,0.0133,-0.0218;ID2;A:-0.2921,0.7470,-9.6869;G:-0.0170,0.0112,-0.0192;ID2;A:-0.2251,0.7135,-9.7109;G:-0.0181,0.0144,-0.0186;ID2;A:-0.2777,0.7230,-9.6822;G:-0.0197,0.0138,-0.0229;ID2;A:-0.3017,0.7326,-9.7061;G:-0.0208,0.0165,-0.0181;ID2;A:-0.2682,0.7039,-9.6822;G:-0.0197,0.0106,-0.0239;End2;Start3;ID3;A:2.7246,-0.5794,-9.6822;G:-0.0149,0.0745,-0.0511;ID3;A:2.7390,-0.6081,-9.7300;G:-0.0122,0.0766,-0.0474;ID3;A:2.7246,-0.5555,-9.7444;G:-0.0170,0.0830,-0.0532;ID3;A:2.7294,-0.5794,-9.7061;G:-0.0144,0.0867,-0.0506;ID3;A:2.7390,-0.5938,-9.7109;G:-0.0144,0.0766,-0.0495;ID3;A:2.7677,-0.5938,-9.7444;G:-0.0154,0.0772,-0.0474;ID3;A:2.7629,-0.5746,-9.7540;G:-0.0170,0.0729,-0.0521;ID3;A:2.7102,-0.5986,-9.7157;G:-0.0181,0.0772,-0.0500;ID3;A:2.7342,-0.5746,-9.7061;G:-0.0170,0.0809,-0.0495;ID3;A:2.7246,-0.5555,-9.7109;G:-0.0122,0.0761,-0.0506;ID3;A:2.7294,-0.5698,-9.6774;G:-0.0112,0.0835,-0.0500;ID3;A:2.7246,-0.5650,-9.6678;G:-0.0122,0.0819,-0.0516;ID3;A:2.7342,-0.5794,-9.7061;G:-0.0144,0.0825,-0.0463;ID3;A:2.7294,-0.5602,-9.7492;G:-0.0106,0.0819,-0.0553;ID3;A:2.7485,-0.6081,-9.6822;G:-0.0085,0.0830,-0.0506;ID3;A:2.7629,-0.5842,-9.6534;G:-0.0069,0.0862,-0.0500;ID3;A:2.7533,-0.5746,-9.6822;G:-0.0138,0.0803,-0.0527;ID3;A:2.7485,-0.5842,-9.6822;G:-0.0133,0.0793,-0.0537;ID3;A:2.7438,-0.5986,-9.7540;G:-0.0112,0.0793,-0.0484;ID3;A:2.7677,-0.5746,-9.6726;G:-0.0122,0.0782,-0.0490;ID3;A:2.7533,-0.5890,-9.6630;G:-0.0138,0.0819,-0.0537;ID3;A:2.7246,-0.5938,-9.5816;G:-0.0154,0.0803,-0.0527;ID3;A:2.7390,-0.6081,-9.6822;G:-0.0096,0.0862,-0.0495;ID3;A:2.7102,-0.6177,-9.7300;G:-0.0128,0.0819,-0.0521;ID3;A:2.7677,-0.5746,-9.7157;G:-0.0154,0.0846,-0.0511;ID3;A:2.7581,-0.6033,-9.7300;G:-0.0170,0.0830,-0.0484;ID3;A:2.7342,-0.5650,-9.7157;G:-0.0117,0.0772,-0.0511;ID3;A:2.7438,-0.5986,-9.7683;G:-0.0133,0.0830,-0.0500;ID3;A:2.7198,-0.5794,-9.6869;G:-0.0149,0.0857,-0.0484;ID3;A:2.7054,-0.5698,-9.7157;G:-0.0165,0.0814,-0.0463;ID3;A:2.7438,-0.6129,-9.6822;G:-0.0202,0.0825,-0.0479;ID3;A:2.7390,-0.5842,-9.7300;G:-0.0186,0.0814,-0.0516;ID3;A:2.7629,-0.6177,-9.6774;G:-0.0160,0.0851,-0.0543;End3;Start4;ID4;A:-2.6097,-0.1963,-10.3142;G:-0.0585,0.0511,-0.0165;ID4;A:-2.6097,-0.1915,-10.2999;G:-0.0521,0.0495,-0.0181;ID4;A:-2.6097,-0.2059,-10.3046;G:-0.0532,0.0431,-0.0202;ID4;A:-2.6097,-0.2442,-10.2328;G:-0.0527,0.0447,-0.0170;ID4;A:-2.6193,-0.1772,-10.2711;G:-0.0543,0.0479,-0.0186;ID4;A:-2.6193,-0.2203,-10.3046;G:-0.0559,0.0516,-0.0170;ID4;A:-2.6384,-0.2059,-10.3142;G:-0.0569,0.0474,-0.0165;ID4;A:-2.6432,-0.1915,-10.2999;G:-0.0548,0.0431,-0.0154;ID4;A:-2.5953,-0.2011,-10.3190;G:-0.0559,0.0543,-0.0186;ID4;A:-2.6097,-0.1820,-10.2520;G:-0.0585,0.0532,-0.0218;ID4;A:-2.6384,-0.2107,-10.2759;G:-0.0585,0.0463,-0.0154;ID4;A:-2.6288,-0.1963,-10.3046;G:-0.0532,0.0500,-0.0176;ID4;A:-2.6097,-0.2107,-10.2951;G:-0.0521,0.0490,-0.0192;ID4;A:-2.6145,-0.2155,-10.2759;G:-0.0569,0.0548,-0.0160;ID4;A:-2.6240,-0.2011,-10.2951;G:-0.0543,0.0474,-0.0186;ID4;A:-2.6001,-0.2059,-10.2903;G:-0.0553,0.0495,-0.0186;ID4;A:-2.6336,-0.2298,-10.3046;G:-0.0585,0.0458,-0.0192;ID4;A:-2.6288,-0.2155,-10.2903;G:-0.0580,0.0468,-0.0170;ID4;A:-2.6336,-0.1867,-10.2615;G:-0.0537,0.0511,-0.0176;ID4;A:-2.6288,-0.1915,-10.3046;G:-0.0559,0.0479,-0.0165;ID4;A:-2.5953,-0.1867,-10.3382;G:-0.0527,0.0495,-0.0154;ID4;A:-2.6288,-0.2011,-10.3477;G:-0.0521,0.0506,-0.0202;ID4;A:-2.6145,-0.2011,-10.2903;G:-0.0575,0.0553,-0.0192;ID4;A:-2.6097,-0.1772,-10.3142;G:-0.0569,0.0516,-0.0192;ID4;A:-2.6288,-0.1963,-10.3142;G:-0.0569,0.0511,-0.0202;ID4;A:-2.5762,-0.1676,-10.2711;G:-0.0548,0.0474,-0.0160;ID4;A:-2.6528,-0.1915,-10.3286;G:-0.0537,0.0479,-0.0181;ID4;A:-2.6480,-0.1963,-10.3190;G:-0.0559,0.0527,-0.0176;ID4;A:-2.6193,-0.2011,-10.3525;G:-0.0553,0.0495,-0.0176;ID4;A:-2.6097,-0.1867,-10.3094;G:-0.0543,0.0521,-0.0197;ID4;A:-2.6097,-0.2203,-10.3477;G:-0.0537,0.0527,-0.0186;ID4;A:-2.6049,-0.2155,-10.3238;G:-0.0511,0.0506,-0.0197;ID4;A:-2.6815,-0.1915,-10.2663;G:-0.0591,0.0458,-0.0138;End4;"
parse_data(raw, EXPECTED_ESP_IDS, TIMESTEPS)

# [18.0, 22.0, 22.0, 22.0]
# [33.0, 37.0, 37.0, 37.0]
# [63.0, 67.0, 67.0, 67.0]